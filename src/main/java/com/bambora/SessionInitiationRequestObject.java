/**
 * 888                             888
 * 888                             888
 * 88888b.   8888b.  88888b.d88b.  88888b.   .d88b.  888d888  8888b.
 * 888 "88b     "88b 888 "888 "88b 888 "88b d88""88b 888P"       "88b
 * 888  888 .d888888 888  888  888 888  888 888  888 888     .d888888
 * 888 d88P 888  888 888  888  888 888 d88P Y88..88P 888     888  888
 * 88888P"  "Y888888 888  888  888 88888P"   "Y88P"  888     "Y888888
 *
 * @category    Checkout java SDK
 * @package     apac-payments-for-checkout-java-sdk
 * @author      Bambora Online APAC
 * @copyright   Bambora (http://bambora.com)
 */
package com.bambora;

import java.math.BigDecimal;

/**
 * SessionInitiationRequestObject is a POJO that you must provide as an argument to the {@link Client} upon initiating a session request.
 */
public class SessionInitiationRequestObject {

    private BigDecimal amount;

    private String sessionID;

    private String sessionKey;

    private String serverURL;

    private String userURL;

    private String accountNumber;

    private String custRef;

    private String custNumber;

    private String email;

    private String reference1;

    private String reference2;

    private String reference3;

    private String reference4;

    private String reference5;

    private String styleName;

    private String userDeclinedURL;

    private String customerStorageNumber;

    /**
     * SessionInitiationRequestObject Constructor
     * @param amount Amount to charge for payment or not required for tokenise-only transactions. Please see section
     *               Payment Page Functionality for further information on tokenise-only.
     * @param sessionID Merchant’s unique session identifier. Maintain this session identifier throughout the life of
     *                  the transaction.
     * @param sessionKey Generated by the merchant, can be any value e.g. random generated number, timestamp etc. The
     *                   session key is to be included for security and authentication purposes. This Key should only be
     *                   passed to IPP’s server and should not be sent to your front end. IPP will return the SessionKey
     *                   to your ServerURL in the transaction response once the payment has been processed. If you do
     *                   not receive a SessionKey or receive an invalid SessionKey, then this should be treated as a
     *                   possible fraudulent transaction. IP Payments needs to be notified of this event along with your
     *                   internal teams for investigation.
     * @param serverURL The URL of your server that IPP will POST the first notification to including the transaction
     *                  result data. If you do not require data to be sent to the ServerURL, please leave this field
     *                  empty. This value must be Base 64 encoded.
     * @param userURL The URL to force the user browser to POST to; this is the second notification. This value must be
     *                Base 64 encoded.
     * @param custRef A reference for the transaction sent by you for reporting purposes.
     */
    public SessionInitiationRequestObject(BigDecimal amount, String sessionID, String sessionKey,
                                          String serverURL, String userURL, String custRef) {
        this.amount = amount;
        this.sessionID = sessionID;
        this.sessionKey = sessionKey;
        this.serverURL = serverURL;
        this.userURL = userURL;
        this.custRef = custRef;

        if (amount == null || (amount.signum() == 0 ? 1 : amount.precision() - amount.scale()) > 8) {
            throw new ClientException("Amount is mandatory and Amount max length 10 digit");
        }
        if (sessionID == null || sessionID.length() == 0 || sessionID.length() > 64) {
            throw new ClientException("SessionID is mandatory and max length is 64 characters");
        }
        if (sessionKey == null || sessionKey.length() == 0 || sessionKey.length() > 64) {
            throw new ClientException("sessionKey is mandatory and max length is 64 characters");
        }
        if (serverURL == null || serverURL.length() == 0 || serverURL.length() > 512) {
            throw new ClientException("serverURL is mandatory and max length is 512 characters");
        }
        if (userURL == null || userURL.length() == 0 || userURL.length() > 512) {
            throw new ClientException("userURL is mandatory and max length is 512 characters");
        }
        if (custRef == null || custRef.length() == 0 || custRef.length() > 64) {
            throw new ClientException("custRef is mandatory and max length is 64 characters");
        }
    }

    /**
     * getAmount
     * @return amount
     */
    public BigDecimal getAmount() {
        return amount;
    }

    /**
     * getSessionID
     * @return sessionID
     */
    public String getSessionID() {
        return sessionID;
    }

    /**
     * getSessionKey
     * @return sessionKey
     */
    public String getSessionKey() {
        return sessionKey;
    }

    /**
     * getServerURL
     * @return serverURL
     */
    public String getServerURL() {
        return serverURL;
    }

    /**
     * getUserURL
     * @return userURL
     */
    public String getUserURL() {
        return userURL;
    }

    /**
     * getCustRef
     * @return custRef
     */
    public String getCustRef() {
        return custRef;
    }

    /**
     * getAccountNumber
     * @return accountNumber
     */
    public String getAccountNumber() {
        return accountNumber;
    }

    /**
     * This value dictates which account the transaction will be processed through. Refer to section Account Hierarchy.
     * If this value is not populated, the transaction will be processed to the account tied to the username field.
     * Max length is 16 characters.
     * @param accountNumber account number
     */
    public void setAccountNumber(String accountNumber) {
        if (accountNumber != null && accountNumber.length() > 16) {
            throw new ClientException("accountNumber max length is 16 characters");
        }
        this.accountNumber = accountNumber;
    }

    /**
     * getCustNumber
     * @return custNumber
     */
    public String getCustNumber() {
        return custNumber;
    }

    /**
     * An additional reference for the transaction sent by you for reporting purposes. Max length is 64 characters.
     * @param custNumber customer number
     */
    public void setCustNumber(String custNumber) {
        if (custNumber != null && custNumber.length() > 64) {
            throw new ClientException("custNumber max length is 64 characters");
        }
        this.custNumber = custNumber;
    }

    /**
     * getEmail
     * @return email
     */
    public String getEmail() {
        return email;
    }

    /**
     * An additional reference for the transaction sent by you for reporting purposes. Please note IP Payments can
     * enable this field to send an email receipt to the email address entered in this field. Please contact IP Payments
     * if you require this service. Max length is 64 characters.
     * @param email email
     */
    public void setEmail(String email) {
        if (email != null && email.length() > 64) {
            throw new ClientException("email max length is 64 characters");
        }
        this.email = email;
    }

    /**
     * getReference1
     * @return reference1
     */
    public String getReference1() {
        return reference1;
    }

    /**
     * This field name can be changed to something more suitable to your company for example “AccountID”. Please advise
     * IPP if you wish to change it. An additional reference that can be sent by you for reporting purposes e.g. a
     * customer identifier unique to your system. Stored for payment requests only i.e. not for the tokenise only
     * transaction. This will be available to view and download with the transaction details in our reporting tool, PRM.
     * Reference1 max length is 32 characters.
     * @param reference1 reference1
     */
    public void setReference1(String reference1) {
        if (reference1 != null && reference1.length() > 32) {
            throw new ClientException("Reference1 max length is 32 characters");
        }
        this.reference1 = reference1;
    }

    /**
     * getReference2
     * @return reference2
     */
    public String getReference2() {
        return reference2;
    }

    /**
     * See text of {@link #setReference1(String)}
     * Reference2 max length is 64 characters.
     * @param reference2 reference2
     */
    public void setReference2(String reference2) {
        if (reference2 != null && reference2.length() > 64) {
            throw new ClientException("reference2 max length is 64 characters");
        }
        this.reference2 = reference2;
    }

    /**
     * getReference3
     * @return reference3
     */
    public String getReference3() {
        return reference3;
    }

    /**
     * See text of {@link #setReference1(String)}
     * Reference3 max length is 128 characters.
     * @param reference3 reference3
     */
    public void setReference3(String reference3) {
        if (reference3 != null && reference3.length() > 128) {
            throw new ClientException("reference3 max length is 128 characters");
        }
        this.reference3 = reference3;
    }

    /**
     * getReference4
     * @return reference4
     */
    public String getReference4() {
        return reference4;
    }

    /**
     * See text of {@link #setReference1(String)}
     * Reference4 max length is 1024 characters.
     * @param reference4 reference4
     */
    public void setReference4(String reference4) {
        if (reference4 != null && reference4.length() > 1024) {
            throw new ClientException("reference4 max length is 1024 characters");
        }
        this.reference4 = reference4;
    }

    /**
     * getReference5
     * @return reference5
     */
    public String getReference5() {
        return reference5;
    }

    /**
     * See text of {@link #setReference1(String)}
     * Reference5 max length is 1024 characters.
     * @param reference5 reference5
     */
    public void setReference5(String reference5) {
        if (reference5 != null && reference5.length() > 1024) {
            throw new ClientException("reference5 max length is 1024 characters");
        }
        this.reference5 = reference5;
    }

    /**
     * getStyleName
     * @return styleName
     */
    public String getStyleName() {
        return styleName;
    }

    /**
     * IPP offer the ability to have multiple CSS styles for the same payment page. This can be useful if you have
     * multiple brands with different styling. Please see section Payment Page Design for further details.
     * Style name max length is 64 characters.
     * @param styleName style name
     */
    public void setStyleName(String styleName) {
        if (styleName != null && styleName.length() > 64) {
            throw new ClientException("styleName max length is 64 characters");
        }
        this.styleName = styleName;
    }

    /**
     * getUserDeclinedURL
     * @return userDeclinedURL
     */
    public String getUserDeclinedURL() {
        return userDeclinedURL;
    }

    /**
     * Offering the ability to have a cancel button on your payment page. By default this page will redirect to the
     * UserURL. If you wish this button to redirect to a different page other than the UserURL, you can specify the
     * UserDeclinedURL in this field. If your customer selects the cancel button on the payment page, the page will be
     * redirected to the declined URL. Please note if you send a value in this field, all responses for declined
     * transactions will be sent to this URL including cancelled transactions and transactions which have been declined
     * by the bank. Please see section Cancel Button for further information. UserDeclinedURL max length is 512 characters.
     * @param userDeclinedURL Url to the user declined page
     */
    public void setUserDeclinedURL(String userDeclinedURL) {
        if (userDeclinedURL != null && userDeclinedURL.length() > 512) {
            throw new ClientException("userDeclinedURL max length is 512 characters");
        }
        this.userDeclinedURL = userDeclinedURL;
    }

    /**
     * getCustomerStorageNumber
     * @return customerStorageNumber
     */
    public String getCustomerStorageNumber() {
        return customerStorageNumber;
    }

    /**
     * The account against which to store the token. Please see section Account Hierarchy.
     * @param customerStorageNumber customerStorageNumber
     */
    public void setCustomerStorageNumber(String customerStorageNumber) {
        if (customerStorageNumber != null && customerStorageNumber.length() > 32) {
            throw new ClientException("customerStorageNumber max length is 32 characters");
        }
        this.customerStorageNumber = customerStorageNumber;
    }
}
